2019 06 03

promise 자바스크립트 최신 컨셉
비동기 프로그래밍

동기
코드를 한줄 한줄 실행함
예를들어 영화 api 를 실행하고 그 다음에 에니메이션 api를 실행하는 형식

안좋은점. 영화 api서버가 느리면 그다음 에니메이션 api의 실행을 못함

이럴때 promise 를 이용
프로미스는 비동기인데
만약에 첫번째 promise된? 영화 api가 있고, 두번째 줄에 애니메이션 api가 있는데 그렇게하면
첫번째 라인이 끝나건 말건 두번째 라인이 작업을 한다는 이야기
모든 작업들은 다른 작업 수행과는 관계없이 진행

또다른 promise 의 기능은 시나리오를 잡는데 도와줌. 좋은 혹은 나쁜 시나리오


fetch(url)
.then(response => response.json())
.then(data =>{
	console.log(data);
})
.catch(err => console.log(err));

asynchronous는 이전 작업이 끝나야 그 다음 작업이 시작하는형태가 아님 (비동기)
순서와 상관없이 진행

async는 함수 앞쪽에 선언
await 는 함수 콜 한 부분의 앞쪽에 선언

return 을 잘 하자

Promise
Promise를 이용하면 비동기를 사용 할 수 있다
Promise를 이용하면 then이라는 함수를 사용 가능하고 then이라는 함수는 Promise의 결과값을 담는다.
then을 이용하면 메소드 체이닝으로 연결 할 수 있는데 두번째 then이 첫번째 then의 리턴값을 이용한다

async
함수의 결과값을 Promise로 만드는 기능을 하며
이 함수가 비동기 이다 라는걸 설정한다

await
비동기 함수가 끝나는 것을 기다리는 명령어

fetch
백엔드 단에서 만들어진 json파일을 읽어들여 Promise함수로 리턴하는 함수
promise형태로 리턴되었기 때문에 then을 쓸 수 있다.

그럼 이것들을 어떻게 쓰느냐

한 함수를 비동기로 두고
async function a (){
	const test = await function(){
		fetch().then().then().catch();
		//이 promise가 끝나는걸 기다린다
	}
	//test 즉 promise의 처리가 끝나고 난 후의 처리를 기술한다
}

