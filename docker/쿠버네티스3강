명령어 정리

    kubectl version
    버전확인

    kubectl cluster-info
    쿠버네티스 클러스터 버전확인

    source <(kubectl completion bash)
    자동완성하게 도와준다는커멘드
    Kubernetes comes with auto-completion.
    You can use the kubectl completion command and the built-in source command to set this up.

    kubectl run nginx --image=nginx:1.10.0
                이름            배포할 이미지
    새로운 디플로이먼트(배포할이미지)를 생성? 로드하는건가?
    
    In Kubernetes, all containers run in pods.
    And in this command, Kubernetes created what is called a deployment behind the scenes,
    and runs a single pod with the nginx container in it. A deployment keeps a given number
    of pods up and running even when the nodes they run on fail. In this case, you run the 
    default number of pods, which is 1.

    kubectl run command. The run command creates a new deployment. We need to provide the 
    deployment name and app image location (include the full repository url for images 
    hosted outside Docker hub). We want to run the app on a specific port so we add 
    the --port parameter:

    kubectl get pods
    배포할 nginx컨테이너의 팟을 확인

    kubectl get deployment
    배포 리스트 확인

    kubectl expose deployment nginx --port 80 --type LoadBalancer
    배포한다
    Use the kubectl expose command to expose the nginx container outside Kubernetes.
    Kubernetes created a service and an external load balancer with a public IP address attached to it
    (you will learn about services later). The IP address remains the same for the life of the service. 
    Any client who hits that public IP address (for example an end user or another container) is routed
    to pods behind the service. In this case, that would be the nginx pod.

    kubectl scale deployment nginx --replicas 3
    Kubectl scale 명령 다음에 배포 유형, 이름 및 원하는 인스턴스 수를 사용합니다.
    Kubernetes supports an easy-to-use workflow out of the box using the kubectl run, expose, and scale commands.

    Explore the built-in pod documentation using the kubectl explain command.

    kubectl explain pods

    While you explore the Kubernetes API, kubectl explain will be one of the most common commands you use.
    Note how you used it above to investigate an API object and how you will use it below to check on various properties of API objects.
    팟에 대한 설명?

    kubectl explain pods.spec.containers
    Use the kubectl explain command with the .spec option to view more information about API objects. This example inspects containers.
    팟의 컨테이너 내용?

    kubectl create -f pods/monolith.yaml
    팟 만들기 

    kubectl discribe pods monolith
    팟을 실행하기?

    kubectl exec monolith --stdin --tty -c monolith /bin/sh
    팟 안의 커맨드 실행

    