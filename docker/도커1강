docker공부-1

기초단어 커멘드 공부

단어
    도커파일, 이미지, 컨테이너
    
    도커파일 : 이미지를 작성하거나, pull 이미지의 설정을 기재한다

    이미지 : 말그대로 이미지(실행파일들?)

    컨테이너 : 이미지가 실행되면 컨테이너다

    도커파일 > 이미지 > 컨테이너

커멘드
    도커 이미지(OS,서버,언어 이미지)를 생성하기 위해서는 두가지 방법이 있는데

    docker pull ubuntu:latest
    docker file 작성

    pull하는 방법과 도커파일을 작성하는 방법2가지가 있다

    pull 은 말 그대로 순수한 이미지를 다운로드 받는 방법(yum install, apt get등)

    도커파일을 작성하는 자세한 방법은 일단 나중에 보도록 하자
    https://docs.docker.com/engine/reference/builder/

    작성한 도커파일을 이미지로 만들기 위해서는 도커 빌드를 해야 한다(./configure 같은것?)

        도커파일은 pull 받은 이미지를 설정하는것, 혹은 이미지를 작성하고 작성한 이미지를 설정하는 기능을 포함하고 있는것 같음

    docker build -t 이미지이름 -f 도커파일경로 .
    도커 파일을 빌드하여 이미지를 작성한다(make &&make install)
    
    -f 파일옵션으로 경로를 지정 해 주지 않으면 dockerfile이 없다고 에러가난다 에러를 안나게 하는방법으로는 -f로 풀경로를 설정한다
    -t 도커파일을 빌드하고 나오는 이미지의 이름을 설정한다
    Be sure to include the '.' at the end of the command. 
    This tells Docker to store the image in the current working directory.

    docker image ls
    도커 이미지 리스트
    
    docker ps
    도커 현재 실행 하고있는 컨테이너 리스트

    docker ps --all
    도커 모든 컨테이너 리스트

    docker run -d -p 8080:80 --name 이미지이름
    도커 이미지 실행(컨테이너 작성 후 실행, 여기서 작성하는 옵션은 또 파일과는 다른듯 컨테이너의 외부네트워크 설정 실행설정)

    -d 데몬(백그라운드 실행)
    -p 포트 설정 8080:80 로컬의 8080포트를 컨테이너의 80포트로 연결해라
    --name 컨테이너의 이름설정(안해주면 랜덤으로 생성되는데 삭제하기 귀찮음)

    docker start 컨테이너이름
    컨테이너 실행

    docker stop 컨테이너이름
    컨테이너 정지

    docker container rm 컨테이너이름
    컨테이너이름 삭제

    docker container prune
    모든 컨테이너 삭제

    docker rm -f 컨테이너이름
    컨테이너이름을 끄고 삭제함

도커 허브? 도커 레지스트리?
arrow_back
Introduction to Containers and Docker v1.5

close
Caution: When you are in the console, do not deviate from the lab instructions. Doing so may cause your account to be blocked.

Username

Password

GCP Project ID

ConnectionProtocol

New to labs? View our introductory video!
Lab Running
End Lab
Introduction to Containers and Docker v1.5

1 hour 30 minutes
1 Credit
Rate Lab
Overview

Containers are a way of isolating programs or processes from each other. The primary aim of containers is to make programs easy to deploy in a way that doesn't cause them to break.

It's easy to start using containers without being familiar with the technology that makes them work.

In this lab, you learn how to build, run, and distribute an application as a Docker image.

Setup

Step 1

What you'll need

To complete this lab, you’ll need:

Access to a standard internet browser (Chrome browser recommended).

Time. Note the lab’s Completion time in Qwiklabs. This is an estimate of the time it should take to complete all steps. Plan your schedule so you have time to complete the lab. Once you start the lab, you will not be able to pause and return later (you begin at step 1 every time you start a lab).

The lab's Access time is how long your lab resources will be available. If you finish your lab with access time still available, you will be able to explore the Google Cloud Platform or work on any section of the lab that was marked "if you have time". Once the Access time runs out, your lab will end and all resources will terminate.

You DO NOT need a Google Cloud Platform account or project. An account, project and associated resources are provided to you as part of this lab.

If you already have your own GCP account, make sure you do not use it for this lab.

If your lab prompts you to log into the console, use only the student account provided to you by the lab. This prevents you from incurring charges for lab activities in your personal GCP account.

Start your lab

When you are ready, click Start Lab. You can track your lab’s progress with the status bar at the top of your screen.

Important What is happening during this time? Your lab is spinning up GCP resources for you behind the scenes, including an account, a project, resources within the project, and permission for you to control the resources needed to run the lab. This means that instead of spending time manually setting up a project and building resources from scratch as part of your lab, you can begin learning more quickly.
Find Your Lab’s GCP Username and Password

To access the resources and console for this lab, locate the Connection Details panel in Qwiklabs. Here you will find the account ID and password for the account you will use to log in to the Google Cloud Platform:

Open Google Console

If your lab provides other resource identifiers or connection-related information, it will appear on this panel as well.

Step 2

In your project, you have a pre-provisioned VM running Ubuntu Xenial and the necessary tools pre-installed. To connect to it:

Click the Navigation menu icon (top-left). ee7a5975ced000f8.png

Select Compute > Compute Engine > VM Instances.

Your instance is listed as k8s-workshop-module-1-lab.
To the right of the instance, click the SSH drop-down arrow and select Open in browser window. You may need to hide the Info Panel on the right to see the drop-down.

This opens another window, copies SSH keys to the host, and logs you in.
Step 3

Make sure the instance is fully provisioned. To do this, run the following command and look for the kickstart directory.

ls /

If the directory is not there, give the instance a few minutes to get fully provisioned before continuing. We've seen it take up to 8 minutes sometimes.
Run and Distribute Containers With Docker

Docker provides a simple means to package applications as containers with a repeatable execution environment.

Explore Docker by creating and running a simple Docker container image that includes a web server written in Python, upload it to a Docker registry, and share it with everyone so it can be run anywhere that supports Docker.

In this lab, you learn how to:

Build a Docker image.

Push a Docker image to Google Cloud Registry.

Run a Docker container.

Run the Web Server Manually

To install and run even a simple web server, you will have dependencies like apt and pypi (Python) for deployment. Versions of dependencies frequently change, so it's useful to automate the process of getting the latest dependency versions at installation time.

Run the web server manually to see the steps. Later, you will automate the process to run it on other machines.

Step 1

The source code for this lab is available in the /kickstart folder. Switch to that directory.

cd /kickstart

And list the contents.

ls -lh

You should see a Dockerfile and web-server.py. web-server.py is a simple Python application that runs a web server which responds to HTTP requests on localhost:8888 and outputs the hostname.

Step 2

Install dependencies.

Install the latest version of Python and PIP.

sudo apt-get install -y python3 python3-pip

Install Tornado library that is required by the application.

pip3 install tornado

Step 3

Run the Python application in the background.

python3 web-server.py &

Step 4

Ensure that the web server is accessible.

curl http://localhost:8888

The response should look like this:

d9e36c197280720.png

Step 5

Terminate the web server.

kill %1

Package Using Docker

Now, see how Docker can help. Docker images are described via Dockerfiles. Docker allows the stacking of images. Your Docker image will be built on top of an existing Docker image library/python that has Python pre-installed.

Step 1

Look at the Dockerfile.

cat Dockerfile

Step 2

Build a Docker image with the web server.

The image is stored in the local image store.
sudo docker build -t py-web-server:v1 .

Be sure to include the '.' at the end of the command. This tells Docker to store the image in the current working directory.

Step 3

Run the web server using Docker.

sudo docker run -d -p 8888:8888 --name py-web-server -h my-web-server py-web-server:v1

Step 4

Try accessing the web server again, and then stop the container.

curl http://localhost:8888

sudo docker rm -f py-web-server

The web server and all its dependencies, including the python and tornado library, have been packaged into a single Docker image that can now be shared with everyone. The py-web-server:v1 docker image functions the same way on all Docker supported OSes (OS X, Windows, and Linux).

Upload the Image to a Registry

The Docker image needs to be uploaded to a Docker registry to be available for use on other machines. Upload the Docker image to your private image repository in Google Cloud Registry (gcr.io).

Step 1

Add the signed in user to the Docker group so you can run docker commands without sudo and push the image to the repository as an authenticated user using the Container Registry credential helper.

sudo usermod -aG docker $USER

Step 2

Restart the SSH session so the group change takes effect and return to the kickstart directory.

cd /kickstart

Step 3

Store your GCP project name in an environment variable.

export GCP_PROJECT=`gcloud config list core/project --format='value(core.project)'`

Step 4

Rebuild the Docker image with a registry name that includes gcr.io as the hostname and the project ID as a prefix.

docker build -t "gcr.io/${GCP_PROJECT}/py-web-server:v1" .

Again, be sure to include the '.' at the end of the command. This tells Docker to store the image in the current working directory.

Make the Image Publically Accessible

Google Container Registry stores its images on Google Cloud storage.

Step 1

Configure Docker to use gcloud as a Container Registry credential helper (you are only required to do this once).

PATH=/usr/lib/google-cloud-sdk/bin:$PATH
gcloud auth configure-docker

When prompted, press ENTER.

Step 2

Push the image to gcr.io.

docker push gcr.io/${GCP_PROJECT}/py-web-server:v1

Step 3

To see the image stored as a bucket (object) in your Google Cloud Storage repository, click the Navigation menu icon and select Storage.

You should see an image like the following:

fc263249f9eaa383.png

Step 4

Update the permissions on Google Cloud Storage to make your image repository publically accessible.

gsutil defacl ch -u AllUsers:R gs://artifacts.${GCP_PROJECT}.appspot.com

gsutil acl ch -r -u AllUsers:R gs://artifacts.${GCP_PROJECT}.appspot.com

gsutil acl ch -u AllUsers:R gs://artifacts.${GCP_PROJECT}.appspot.com

The image is now available to anyone who has access to your GCP project.

Run the Web Server From Any Machine

The Docker image can now be run from any machine that has Docker installed by running the following command.

docker run -d -p 8888:8888 -h my-web-server gcr.io/${GCP_PROJECT}/py-web-server:v1

You can test it on your VM instance (re-using the curl command from above).

To learn more about Dockerfiles, look at this reference.

To know more about Docker images, look at this reference.

Exit the lab environment and return to the Cloud Shell.

exit

End your lab

When you have completed your lab, click End Lab. Qwiklabs removes the resources you’ve used and cleans the account for you.

You will be given an opportunity to rate the lab experience. Select the applicable number of stars, type a comment, and then click Submit.

The number of stars indicates the following:
