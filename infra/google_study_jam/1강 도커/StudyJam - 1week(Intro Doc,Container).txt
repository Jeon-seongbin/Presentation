이 문서는 2019.3.14 에 시작된 구글 cloud platform에서 진행되는 Docker+Kubernetes Basics를 다루는 내용이다. 강좌내용은 따로 소개하지 않으며 qwiklab에서 진행된 코드위주의 구성만을 다룬다. 그러므로, 이 문서를 접하는 사람은 Docker와 Kubernetes에 대해서 별도의 개론공부를 진행해야 할 것이다. 

=======================================================================================================================================
=======================================================================================================================================

	<<<<Lab1 : Introduction to Containers and Docker>>>>

Step1 : What you'll need
 Qwiklabs에서 제공하는 ssh환경을 사용하게 된다. 그러므로 학습자는 인터넷과 chrome browser, 구글에서 제공하는 별도의 student acount만 있으면 학습을 진행할 수 있다. (추가로, 학습자는 개인소유의 GCP acount를 사용할 필요 없다.)

Step2 : 
 Navigation menu 아이콘을 클릭한 후, Comput > Compute Engine > VM Instances를 선택하면, instance list에 k8s-workshop-module-1-lab이 존재함을 확인할 수 있다. 해당 instance의 화살표를 선택하여 'Open in Browser window.'를 클릭하면 SSH창이 뜬다. 학습자료에는 SSH key를 카피하여 로그인하라 되어 있지만 그것을 수행하지 않고도 학습을 진행할 수 있었다.

Step3 : 
'ls /'명령어를 통해 kickstart 디렉토리가 있는것을 확인한다. 자료에는 instance내부에서 directory가 완전히 나타날 때까지 8분까지도 걸리는 경우가 있다하니 참고하라.





Run and Distribute Containers with Docker
 Docker는 응용프로그램을 반복적인 실행이 가능한 환경의 컨테이너로 package하는 간단한 방법을 제공한다. 여기서는 Python으로 작성된 간단한 웹서버를 포함하는 Docker Container image를 만들고, Docker Resitry(Hub)에 업로드한 다음, 모든 사람과 공유하여 Docker를 지원하는 곳이면 어디서든 실행할 수 있는 방법을 알아본다.
여기에서 배우는 것은
	Docker Image를 빌드하고,
	Google Cloud Registry(GCR)에 빌드한 Docker Image를 push하고,
	Docker Container를 실행하는 방법을 알아본다.

	
	Run the Web server Manually

간단한 웹서버라도 설치하고 실행하기 위해서는 apt와 pypi(Python)에 의존하는 개발도구를 갖춰야한다. 자료에서는 가장 최신의 버전들을 사용하는 것을 가정하였다.

Step1 :
 /kickstart 폴더에 이 lab에서 사용가능한 소스코드들이 있다. 'cd /kickstart','ls -lh'명령어를 통해 Dockerfile과 web-server.py 두 파일이 있음을 확인가능. localhost:888에서 HTTP requests에 응답하고 hostname을 사용함에 주목하라.

Step2 : Install Independencies

 다음의 명령어를 통해 Python, PIP, Tornado를 설치할 수 있다.
 'sudo apt-get install -y python3 python3-pip', 'pip3 install tornado'

Step3 : Python 어플리케이션을 background에서 실행할 수 있다.
 'python3 web-server.py &'

Step4 : 이 웹서버에 접근할 수 있음을 확인하라.
 'culr http://localhost:8888'
 이에 대한 응답은 다음과 같을 것이다. 'Hostname: k8s-workshop-module-1-lab'

Step5 : 실행되는 웹서버를 제거하라.
 'kill %1'


	Package Using Docker

 이제, 도커가 어떻게 도움이 되는지를 살펴볼 수 있다. Docker image들은 Dockerfiles로 표현되어 있다. Docker는 image stacking을 허용한다(image stacking이 무엇인지는 차후 조사). Docker image는 파이썬이 사전 설치되어 있는 기존 Docker image library/Python 위에 빌드 된다.

Step1 : Look at the Dockerfile.
 'cat Dockerfile'을 실행해보면, python과 tornado가 미리 설치되어 있다는 문구가 뜰 것이다. 만약 그렇지 않다면, 처음으로 돌아가서 수행하는 것을 권장

Step2 : 도커이미지를 웹서버와 함께 빌드
 지금 상태에서, docker image는 local image store에 저장되어 있다. 이 상태에서 도커 이미지를 빌드할 수 있다.
 'sudo docker build -t -py-web-server:v1 .' , 여기서 '.'이 의미하는 것은 현재 디렉토리에 docker가 저장되어 있다는 것이다. Docker image를 빌드했으니 이제 실행할 수 있다.(빌드와 실행은 다른 것임에 주목하라)

Step3 : Run the web server using Docker.
'sudo docker run -d -p 8888:8888 --name py-web-server -h my-web-server py-web-server:v1', 현재 머신(지금 작업하는 ssh창)의 8888번 포트에서 컨테이너의 8888번 포트를 연결한다. -h option은 불분명하지만, py-web-server라는 이름으로 py-web-server:v1을 실행한다는 의미를 가지고 있다.

Step4 : Try accessing the web server again, and then stop the container.
 다음과 같은 명령어를 통해 접근가능함을 확인할 수 있고, 컨테이너를 정지시킬 수도 있다. 
 'curl http://localhost:8888', 'sudo docker rm -f py-web-server'

Python과 Tornado library를 포함한 web server와 모든 의존성은, 다른 사람과 공유할 수 있는 단일 Docker image로 패키징되었다. 그러므로 py-web-server:v1 도커 이미지는 모든 도커지원 OS에서 '동일'한 방식으로 작동한다.


	Upload the image to a Registry

 Docker image는 다른 machine에서도 사용할 수 있도록 Docker registry에 업로드 되어야 할 필요가 있다. 여기에서는 private image repository(현재 머신)에서 Google Cloud Registry(gcr.io).로 upload하게 된다.

Step1 : Container Registry credential helper 설정
 sudo 명령어 없이 docker command를 사용하고 레포지토리에 push하기 위함이다.
 'sudo usermod -aG docker $USER'

Step2 : 재접속
 SSH session을 재접속하고 kickstart directory로 돌아온다.

Step3 : GCP project name을 환경변수로 지정하여 저장한다.
 명령어부터 살펴보자. export GCP_PROJECT=`gcloud config list core/project --format='value(core.project)'`
 지금 우리가 하려는 것은 개인 도커 레포지토리(q8s~~~~) url에 docker image를 빌드하려고 하는 것이다. 그런데 url을 모르니까 GCP_PROJECT라는 환경변수를 따로 만들어서 url을 가져오게 된다. 이는 Step4에서 이어진다.

Step4 : 도커이미지를 gcr.io를 포함하는 레지스트리명과 함께 rebuild한다. 
 'docker build -t "gcr.io/${GCP_PROJECT}/py-web-server:v1" .'의 명령어로 빌드할 수 있다. 마찬가지로 '.'는 현재 머신의 현재 디렉토리에서 이 작업을 수행함을 의미한다.


	Make the image publically Accesible
 이제 구글 컨테이너 레지스트리 저장소는 구글 클라우드 저장소(개인 도커 레포지토리)에 이미지를 저장하게 되었다.(빌드하게 되었다.)

Step1 : gcloud에서의 Container Registry credential helper를 다음과 같은 명령어로 지정가능하다.

PATH=/usr/lib/google-cloud-sdk/bin:$PATH
gcloud auth configure-docker

Step2 : 도커이미지를 gcr.io에 push한다.

docker push gcr.io/${GCP_PROJECT}/py-web-server:v1

gcr.io에 이미지를 올렸으니, 이제 다른 컴퓨터(머신)에서도 이미지파일을 다운로드받아 동일한 환경에서 사용할 수 있다. 이 명령어의 결과물은 Navigation menu의 Storage에서 확인 가능하다.(Docker image가 올라와 있음을 확인하라.)

Step4 : 이제 구글 클라우드 스토리지에 누구나 접속할 수 있도록 학습자의 image repository의 접근권한을 바꿔준다.

gsutil defacl ch -u AllUsers:R gs://artifacts.${GCP_PROJECT}.appspot.com
gsutil acl ch -r -u AllUsers:R gs://artifacts.${GCP_PROJECT}.appspot.com
gsutil acl ch -u AllUsers:R gs://artifacts.${GCP_PROJECT}.appspot.com

이제 그 어떤 사용자도 당신의 GCP project에 접근할 수 있다.



	Run the Webserver From A.N.Y Machine

이제 Docker image는 다른 Docker실행환경을 가진 환경에서도 다음과 같은 명령어로 실행 될 수 있다.

docker run -d -p 8888:8888 -h my-web-server gcr.io/${GCP_PROJECT}/py-web-server:v1

Cloud shell을 종료할 때는

exit.